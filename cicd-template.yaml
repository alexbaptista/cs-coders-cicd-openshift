apiVersion: v1
kind: Template
labels:
  template: coders-cicd
  group: coders-cicd
metadata:
  annotations:
    iconClass: icon-jenkins
    tags: instant-app,jenkins,gogs,nexus,cicd
  name: coders-cicd
message: "Template exemplo para o Coders, fork do https://github.com/OpenShiftDemos/openshift-cd-demo"
parameters:
- displayName: DEV project name
  value: coders-dev
  name: DEV_PROJECT
  required: true
- displayName: STAGE project name
  value: coders-stage
  name: STAGE_PROJECT
  required: true
- description: Webhook secret
  from: '[a-zA-Z0-9]{8}'
  generate: expression
  name: WEBHOOK_SECRET
  required: true
objects:
- apiVersion: v1
  groupNames: null
  kind: RoleBinding
  metadata:
    name: default_admin
  roleRef:
    name: admin
  subjects:
  - kind: ServiceAccount
    name: default
# Pipeline
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      pipeline.alpha.openshift.io/uses: '[{"name": "jenkins", "namespace": "", "kind": "DeploymentConfig"}]'
    labels:
      app: coders-cicd-pipeline
      name: coders-cicd-pipeline
    name: coders-cicd-pipeline
  spec:
    triggers:
      - type: GitHub
        github:
          secret: ${WEBHOOK_SECRET}
      - type: Generic
        generic:
          secret: ${WEBHOOK_SECRET}
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        env:
        - name: DEV_PROJECT
          value: ${DEV_PROJECT}
        - name: STAGE_PROJECT
          value: ${STAGE_PROJECT}
        jenkinsfile: |-
            def version, mvnCmd = "mvn -s configuration/nexus.xml"

            pipeline{
                agent{
                    label "maven"
                }
                stages{
                    stage('Checkout GIT'){
                        steps{
                          git branch: 'develop', url: 'https://github.com/alexbaptista/cs-coders-spring-app.git'
                            script{
                                def pom = readMavenPom file: 'pom.xml'
                                version = pom.version
                            }
                            sh "${mvnCmd} install -DskipTests=true"
                        }
                    }
                    stage('Test'){
                        steps{
                            sh "${mvnCmd} test"
                            step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])
                        }
                    }
                    stage('Code Analysis') {
                        steps {
                            script {
                                sh "${mvnCmd} sonar:sonar -Dsonar.host.url=http://sonarqube:9000 -DskipTests=true"
                            }
                        }
                    }
                    stage('Archive App') {
                        steps{
                            sh "${mvnCmd} deploy -DskipTests=true -P nexus3"
                        }
                    }
                    stage('Create Image Builder') {
                        when{
                            expression{
                                openshift.withCluster(){
                                    openshift.withProject(env.DEV_PROJECT){
                                        return !openshift.selector("bc", "coders-app").exists();
                                    }
                                }
                            }
                        }
                        steps{
                            script{
                                openshift.withCluster(){
                                    openshift.withProject(env.DEV_PROJECT){
                                        sh "cat Dockerfile | oc new-build -D - --name coders-app --docker-image=docker.io/maven:alpine -n $DEV_PROJECT"
                                    }
                                }
                            }
                        }
                    }
                    stage('Build Image'){
                        steps{
                            sh "rm -rf oc-build && mkdir -p oc-build"
                            sh "cp target/cs-coders-spring-app-*-SNAPSHOT.jar oc-build/coders-app.jar"
                              
                            script{
                                openshift.withCluster(){
                                    openshift.withProject(env.DEV_PROJECT){
                                        openshift.selector("bc", "coders-app").startBuild("--from-dir=./oc-build", "--wait=true")
                                    }
                                }
                            }
                        }
                    }
                    stage('Create DEV'){
                        when{
                            expression{
                                openshift.withCluster(){
                                    openshift.withProject(env.DEV_PROJECT){
                                        return !openshift.selector('dc', 'coders-app').exists()
                                    }
                                }
                            }
                        }
                        steps{
                            script{
                                openshift.withCluster(){
                                    openshift.withProject(env.DEV_PROJECT){
                                        def app = openshift.newApp("coders-app:latest")
                                        app.narrow("svc").expose();

                                        //openshift.set("probe dc/coders-app --readiness --get-url=http://:8080/ws/demo/healthcheck --initial-delay-seconds=30 --failure-threshold=10 --period-seconds=10")
                                        //openshift.set("probe dc/coders-app --liveness  --get-url=http://:8080/ws/demo/healthcheck --initial-delay-seconds=180 --failure-threshold=10 --period-seconds=10")

                                        def dc = openshift.selector("dc", "coders-app")
                                        while (dc.object().spec.replicas != dc.object().status.availableReplicas) {
                                            sleep 10
                                        }
                                        openshift.set("triggers", "dc/coders-app", "--manual")
                                    }
                                }
                            }
                        }
                    }
                    stage('Deploy DEV'){
                        steps{
                            script{
                                openshift.withCluster(){
                                    openshift.withProject(env.DEV_PROJECT){
                                        openshift.selector("dc", "coders-app").rollout().latest();
                                    }
                                }
                            }
                        }
                    }
                    stage('Promote to STAGE?') {
                        steps {
                            timeout(time:15, unit:'MINUTES') {
                                input message: "Promote to STAGE?", ok: "Promote"
                            }

                            script {
                                openshift.withCluster() {
                                    openshift.tag("${env.DEV_PROJECT}/coders-app:latest", "${env.STAGE_PROJECT}/coders-app:${version}")
                                }
                            }
                        }
                    }
                    stage('Deploy STAGE') {
                        steps {
                            script {
                                openshift.withCluster() {
                                    openshift.withProject(env.STAGE_PROJECT) {
                                        if (openshift.selector('dc', 'coders-app').exists()) {
                                            openshift.selector('dc', 'coders-app').delete()
                                            openshift.selector('svc', 'coders-app').delete()
                                            openshift.selector('route', 'coders-app').delete()
                                        }

                                        openshift.newApp("coders-app:${version}").narrow("svc").expose()
                                        //openshift.set("probe dc/coders-app --readiness --get-url=http://:8080/ws/demo/healthcheck --initial-delay-seconds=30 --failure-threshold=10 --period-seconds=10")
                                        //openshift.set("probe dc/coders-app --liveness  --get-url=http://:8080/ws/demo/healthcheck --initial-delay-seconds=180 --failure-threshold=10 --period-seconds=10")
                                    }
                                }
                            }
                        }
                    }
                }
            }
      type: JenkinsPipeline
# Setup Demo
- apiVersion: batch/v1
  kind: Job
  metadata:
    name: coders-cicd-demo-installer
  spec:
    activeDeadlineSeconds: 400
    completions: 1
    parallelism: 1
    template:
      spec:
        containers:
        - env:
          - name: CICD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          command:
          - /bin/bash
          - -x
          - -c
          - |
            oc new-app -f https://raw.githubusercontent.com/openshift/jenkins/master/openshift/templates/jenkins-persistent.json --param=MEMORY_LIMIT=1Gi

            oc new-app -f https://raw.githubusercontent.com/OpenShiftDemos/sonarqube-openshift-docker/master/sonarqube-template.yaml --param=SONARQUBE_VERSION=6.7 --param=SONAR_MAX_MEMORY=2Gi

            oc new-app -f https://raw.githubusercontent.com/OpenShiftDemos/nexus/master/nexus3-persistent-template.yaml --param=NEXUS_VERSION=3.12.1 --param=MAX_MEMORY=2Gi

          image: openshift/origin:v3.10
          name: coders-cicd-demo-installer-job
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        restartPolicy: Never